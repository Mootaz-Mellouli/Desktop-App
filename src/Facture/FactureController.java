package Facture;


import Facture.ArticleFacture;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;


import java.net.URL;
import java.sql.*;
import java.time.LocalDate;
import java.util.Optional;
import java.util.ResourceBundle;

public class FactureController implements Initializable {

    @FXML
    private TextField tfNumFac;
    @FXML
    private TextField tfRefFac;
    @FXML
    private TextField tfCode;
    @FXML
    private TextField tfDesignation;
    @FXML
    private TextField tfPUHT;
    @FXML
    private TextField tfQte;
    @FXML
    private TextField tfPoidsU;
    @FXML
    private TextField tfTVA;
    @FXML
    private TextField tfID;
    @FXML
    private ComboBox tfClient;
    @FXML
    private DatePicker tfDateCreation;
    @FXML
    private TableView<ArticleFacture> tvArticle;
    @FXML
    private TableColumn tvNumFac;
    @FXML
    private TableColumn tvCode;
    @FXML
    private TableColumn tvDesignation;
    @FXML
    private TableColumn tvPUHT;
    @FXML
    private TableColumn tvQte;
    @FXML
    private TableColumn tvPoidsU;
    @FXML
    private TableColumn tvTVA;
    @FXML
    private TableColumn tvTotaleHT;
    @FXML
    private TableColumn tvTotaleTTC;
    @FXML
    private TableColumn tvID;
    @FXML
    private Button btnInsererArticle;
    @FXML
    private Button btnsupprimerarticle;
    @FXML
    private Button btnmodifierarticle;
    @FXML
    private Button btnValider;
    @FXML
    private Button btnAnnuler;
    @FXML
    private TextField tfTotaleHTGen ;
    @FXML
    private TextField tfTotaleTTCGen ;




    // Event Listener on ComboBox[#tfFournisseur].onAction
    @FXML
    public void selectClient(ActionEvent event) {
        // TODO Autogenerated
    }
    // Event Listener on TableView[#tvArticle].onMouseClicked
    @FXML
    public void selectArticle(MouseEvent event) {
        ArticleFacture article =  tvArticle.getSelectionModel().getSelectedItem();
        tfCode.setText(""+article.getCode());
        tfDesignation.setText(""+article.getDesignation());
        tfPUHT.setText(""+article.getPrixUHT());
        tfQte.setText(""+article.getQte());
        tfPoidsU.setText(""+article.getPoidsUni());
        tfTVA.setText(""+article.getTva());
        tfID.setText(""+article.getId());
    }
    // Event Listener on Button[#insererArticle].onMouseClicked
    @FXML
    public void insererArticle(MouseEvent event) {
       InsererArticleTableau();
        VoirArticle();
       totaleHTTTC();
        totaleGeneral();
    }
    // Event Listener on Button[#btnSupprimer].onMouseClicked
    @FXML
    public void supprimerArticle(MouseEvent event) {
        if(event.getSource()==btnsupprimerarticle)
        {
            Alert alert = new Alert (Alert.AlertType.CONFIRMATION) ;
            alert.setHeaderText("Êtes-vous sûr de vouloir supprimer cet article");
            Optional<ButtonType> result = alert.showAndWait();
            if(result.isPresent()&&result.get()==ButtonType.OK)
            {
               deleteArticle();
                clear();
            }
        }
    }
    // Event Listener on Button[#btnModifier].onMouseClicked
    @FXML
    public void modifierArticle(MouseEvent event) {
        if(event.getSource()==btnmodifierarticle)
        {
            Alert alert = new Alert (Alert.AlertType.CONFIRMATION) ;
            alert.setHeaderText("Êtes-vous sûr de vouloir modifier cet article");
            Optional<ButtonType> result = alert.showAndWait();
            if(result.isPresent()&&result.get()==ButtonType.OK)
            {
                modifierArticle();
                clear();
            }
        }
    }
    // Event Listener on Button[#btnvalider].onMouseClicked
    @FXML
    public void validerFacture(MouseEvent event) {
        if(event.getSource() == btnValider)
        {
            Alert alert = new Alert (Alert.AlertType.CONFIRMATION) ;
            alert.setHeaderText("Êtes-vous sûr de vouloir valider ce bon de reception");
            Optional<ButtonType> result = alert.showAndWait();
            if(result.isPresent()&&result.get()==ButtonType.OK)
            {
               ValierDevis();
                (((Node) event.getSource())).getScene().getWindow().hide();
            }
        }

    }
    @FXML
    public void quitter(MouseEvent event) {
        if(event.getSource() == btnAnnuler)
        {
            Alert alert = new Alert (Alert.AlertType.CONFIRMATION) ;
            alert.setHeaderText("Êtes-vous sûr de vouloir valider ce bon de reception");
            Optional<ButtonType> result = alert.showAndWait();
            if(result.isPresent()&&result.get()==ButtonType.OK)
            {
                // AjouterBonDeLivraison();
                //condition();
                (((Node) event.getSource())).getScene().getWindow().hide();
            }
        }

    }
    /************************************ INITIALIZE ************************/
    @Override
    public void initialize(URL location, ResourceBundle resources) {
       viderTable();
        remplirComboBox();
        setNumero();
        setDateCreation();

    }


    /************************************ CONNECTION ********************************************************/
    public Connection getConnection()
    {
        Connection conn ;
        try {
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/atec","root","");
            return conn ;
        } catch (SQLException e) {
            System.out.println("Error" + e.getMessage());
            return null ;
        }
    }
    /************************************ EXECUTE QUERY ********************************************************/
    private void executeQuery(String query) {

        Connection conn = getConnection();
        Statement st ;

        try {
            st = conn.createStatement();
            st.executeUpdate(query);
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }

    /*********************************************** REMPLIR COMBO BOX *******************************************************/
    public void remplirComboBox()
    {
        Connection conn = getConnection();
        String query = "SELECT nom,prenom FROM client" ;
        Statement st ;
        ResultSet rs ;

        try {
            st = conn.createStatement();
            rs = st.executeQuery(query);

            while(rs.next())
            {
                String nom = rs.getString("nom");
                String prenom = rs.getString("prenom");
                String item = nom+" "+prenom ;
                tfClient.getItems().add(item);

            }

        }catch(Exception e) {
            e.printStackTrace();
        }
    }

    /************************************ SET NUMERO BON *********************************************************/
    public void setNumero()
    {
        Connection conn = getConnection();
        String query = "SELECT numeroFacture  FROM facture" ;
        Statement st ;
        ResultSet rs ;

        try {
            st = conn.createStatement();
            rs = st.executeQuery(query);

            while(rs.next())
            {
                tfNumFac.setText(""+rs.getInt("numeroFacture"));
            }

        }catch(Exception e) {
            e.printStackTrace();
        }

    }
    /*************************************** DATE CREATION ******************************************************************/
    public void setDateCreation()
    {
        tfDateCreation.setValue(LocalDate.now());
    }

    /******************************************************* AJOUTER UN ARTICE DANS LE TABLEAU ********************************************************/
    public void InsererArticleTableau()
    {
        int x = 1 ;
        int y = 1 ;
        String numero = tfNumFac.getText();
        String query="INSERT INTO articlefacture(code, designation, qte, prixUHT, tva, 	PoidsUni, totaleHT,totaleTTC,numeroFacture) VALUES ('"+tfCode.getText()+"','"+tfDesignation.getText()+"','"+tfQte.getText()+"','"+tfPUHT.getText()+"','"+tfTVA.getText()+"','"+tfPoidsU.getText()+"',"+x+","+y+",'"+numero+"')" ;
        executeQuery(query);
        String query2="INSERT INTO articlefacturetemp(code, designation, qte, prixUHT, tva, 	PoidsUni, totaleHT,totaleTTC,numeroFacture) VALUES ('"+tfCode.getText()+"','"+tfDesignation.getText()+"','"+tfQte.getText()+"','"+tfPUHT.getText()+"','"+tfTVA.getText()+"','"+tfPoidsU.getText()+"',"+x+","+y+",'"+numero+"')" ;
        executeQuery(query2);
    }
    /*************************************************** VALIDER LE DEVIS************************************************************************/
    public void ValierDevis()
    {
        String query="INSERT INTO facture( client, reference, dateCreation,TotaleHTGen,TotaleTTCGen) VALUES ('"+tfClient.getValue()+"','"+tfRefFac.getText()+"','"+tfDateCreation.getValue()+"','"+tfTotaleHTGen.getText()+"','"+tfTotaleTTCGen.getText()+"')" ;
        executeQuery(query);
    }
    /***************************************** AFFICHAGE DANS LE TABLEAU ********************************************************/

    public ObservableList<ArticleFacture> getArticleListe()
    {

        ObservableList<ArticleFacture> ArticleListe = FXCollections.observableArrayList();
        Connection conn = getConnection();
        String query = "SELECT * from articlefacturetemp";
        Statement st ;
        ResultSet rs ;

        try {
            st = conn.createStatement();
            rs = st.executeQuery(query);
            ArticleFacture bdl ;
            while(rs.next())
            {
                bdl = new ArticleFacture(rs.getInt("id"),rs.getInt("code"),rs.getString("designation"),rs.getString("prixUHT"),rs.getString("poidsUni"),rs.getString("numeroFacture"),rs.getString("qte"),rs.getString("tva"),rs.getInt("totaleHT"),rs.getInt("totaleTTC"));
                ArticleListe.add(bdl);
            }

        }catch(Exception e) {
            e.printStackTrace();
        }

        return ArticleListe ;

    }

    public void VoirArticle()
    {
        ObservableList<ArticleFacture> list = getArticleListe();
        tvCode.setCellValueFactory(new PropertyValueFactory("code"));
        tvDesignation.setCellValueFactory(new PropertyValueFactory("designation"));
        tvPUHT.setCellValueFactory(new PropertyValueFactory("prixUHT"));
        tvQte.setCellValueFactory(new PropertyValueFactory("qte"));
        tvPoidsU.setCellValueFactory(new PropertyValueFactory("poidsUni"));
        tvTVA.setCellValueFactory(new PropertyValueFactory("tva"));
        tvTotaleHT.setCellValueFactory(new PropertyValueFactory("totaleHT"));
        tvTotaleTTC.setCellValueFactory(new PropertyValueFactory("totaleTTC"));
        tvID.setCellValueFactory(new PropertyValueFactory("id"));
        tvNumFac.setCellValueFactory(new PropertyValueFactory("numeroFacture"));

        tvArticle.getItems().clear();

        tvArticle.setItems(list);

    }
    /************************************* CALCUL TOTAL HT,TTC************************************************************************/
    public void totaleHTTTC()
    {
        int prixuht = 0;
        int qte = 0 ;
        int tva = 0;
        String x = null ;
        try {
            x = tfPUHT.getText();
            prixuht = Integer.parseInt(x);
        }catch(NumberFormatException e){
            System.out.println("not a number");
        }
        try {
            String y = tfQte.getText();
            qte = Integer.parseInt(y);
        }catch(NumberFormatException e){
            System.out.println("not a number");
        }

        try {
            String z = tfTVA.getText();
            tva = Integer.parseInt(z);
        }catch(NumberFormatException e){
            System.out.println("not a number");
        }

        int res = (prixuht*qte) ;
        tva=(res*tva)/100;
        int r = 0 ;
        r=res+tva ;
        int id = getID();

        String query = "UPDATE articlefacture SET totaleHT  = '" +res + "', totaleTTC = '" + r + "'  WHERE  id = " +id + "";
        executeQuery(query);
        String query2 = "UPDATE articlefacturetemp SET totaleHT  = '" +res + "', totaleTTC = '" + r + "'  WHERE  id = " +id + "";
        executeQuery(query2);
        VoirArticle();

    }

    /************************************** GET ID **********************************************************************/
    public int  getID()
    {
        int res = 0 ;
        Connection conn = getConnection();
        String query = "SELECT id FROM articlefacturetemp ORDER BY ID DESC LIMIT 1";
        Statement st ;
        ResultSet rs ;
        try {
            st = conn.createStatement();
            rs = st.executeQuery(query);
            while(rs.next())
            {
                res = rs.getInt("id");
            }
        }catch(Exception e) {
            e.printStackTrace();
        }
        return res ;
    }

    /***************************** TOTALE GENERAL ************************************************/
    public  void totaleGeneral()
    {
        int resht = 0 ;
        int resttc = 0 ;
        Connection conn = getConnection();
        String query = "SELECT SUM(totaleHT),SUM(totaleTTC) FROM articlefacturetemp INNER JOIN facture ON articlefacturetemp.numeroFacture=facture.numeroFacture WHERE articleFacturetemp.numeroFacture=(SELECT MAX(articleFacturetemp.numeroFacture)FROM Facture)";
        Statement st ;
        ResultSet rs ;
        try {
            st = conn.createStatement();
            rs = st.executeQuery(query);
            while(rs.next())
            {
                resht = rs.getInt("SUM(totaleHT)");
                resttc = rs.getInt("SUM(totaleTTC)");
            }
        }catch(Exception e) {
            e.printStackTrace();
        }
        tfTotaleHTGen.setText(""+resht);
        tfTotaleTTCGen.setText(""+resttc);
    }
    /*************************** EFFACER ARTICLE DE LA TABLE ARTICLE *******************************************************************************/
    public void deleteArticle()
    {
        String query="DELETE  FROM articlefacture where id ="+tfID.getText()+"";
        executeQuery(query);
        String query2="DELETE  FROM articlefacturetemp where id ="+tfID.getText()+"";
        executeQuery(query2);
        VoirArticle();
    }
    /**************************** MODIFIER ARTICLE DE LA TABLE ARTICLE**********************************************************************************************/
    public void modifierArticle()
    {
        String query = "UPDATE articlefacture SET code  = '" +tfCode.getText() + "', designation = '" + tfDesignation.getText() + "', qte = '" +tfQte.getText() + "', prixUHT = '" +tfPUHT.getText() + "', tva = '" +tfTVA.getText() +"', PoidsUni = '" +tfPoidsU.getText() +"' WHERE  id = " +tfID.getText() + "";
        executeQuery(query);
        String query2 = "UPDATE articlefacturetemp SET code  = '" +tfCode.getText() + "', designation = '" + tfDesignation.getText() + "', qte = '" +tfQte.getText() + "', prixUHT = '" +tfPUHT.getText() + "', tva = '" +tfTVA.getText() +"', PoidsUni = '" +tfPoidsU.getText() +"' WHERE  id = " +tfID.getText() + "";
        executeQuery(query2);
        VoirArticle();
    }
    /***************************************** CLEAR FUNCTION *********************************************************/
    public void clear()
    {
        tfCode.clear();
        tfDesignation.clear();
        tfID.clear();
        tfPUHT.clear();
        tfQte.clear();
        tfPoidsU.clear();
        tfTVA.clear();
        tfTotaleHTGen.clear();
        tfTotaleTTCGen.clear();
    }
    /***************************************** VIDER LA TABLE ARTICLE TEMP***********************************/
    public void viderTable()
    {
        String query="TRUNCATE TABLE articlefacturetemp";
        executeQuery(query);
    }



















}
