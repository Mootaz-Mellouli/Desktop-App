package BonReception;

import Article.Article;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.cell.PropertyValueFactory;

import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.Optional;
import java.util.ResourceBundle;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.ComboBox;

import javafx.scene.input.MouseEvent;

import javafx.scene.control.DatePicker;
import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;

public class BonDeReceptionController implements Initializable {
	@FXML
	private TextField tfnum;
	@FXML
	private TextField tfref;
	@FXML
	private TextField tfcode;
	@FXML
	private TextField tfdesi;
	@FXML
	private TextField tfprixUHT;
	@FXML
	private TextField tfqte;
	@FXML
	private TextField tfpoidsU;
	@FXML
	private TextField tfTva;
	@FXML
	private TextField tfID;
	@FXML
	private ComboBox tfFournisseur;
	@FXML
	private DatePicker tfdateCrea;
	@FXML
	private TableView<ArticleBR> tvArticle;
	@FXML
	private TableColumn tvnumero;
	@FXML
	private TableColumn tvcode;
	@FXML
	private TableColumn tvdesi;
	@FXML
	private TableColumn tvprixu;
	@FXML
	private TableColumn tvqte;
	@FXML
	private TableColumn tvpoidsu;
	@FXML
	private TableColumn tvtva;
	@FXML
	private TableColumn tvtotaleHT;
	@FXML
	private TableColumn tvtotaleTTC;
	@FXML
	private TableColumn tvID;
	@FXML
	private Button insererArticle;
	@FXML
	private Button btnSupprimer;
	@FXML
	private Button btnModifier;
	@FXML
	private Button btnvalider;
	@FXML 
	private TextField tfTotaleHTGen ;
	@FXML 
	private TextField tfTotaleTTCGen ;
	
	
	

	// Event Listener on ComboBox[#tfFournisseur].onAction
	@FXML
	public void selectClient(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on TableView[#tvArticle].onMouseClicked
	@FXML
	public void selectArticle(MouseEvent event) {
		ArticleBR article =  tvArticle.getSelectionModel().getSelectedItem();
		tfcode.setText(""+article.getCode());
		tfdesi.setText(""+article.getDesignation());
		tfprixUHT.setText(""+article.getPrixUHT());
		tfqte.setText(""+article.getQte());
		tfpoidsU.setText(""+article.getPoidsUni());
		tfTva.setText(""+article.getTva());
		tfID.setText(""+article.getId());
	}
	// Event Listener on Button[#insererArticle].onMouseClicked
	@FXML
	public void ajouterArticle(MouseEvent event) {
		InsererArticleTableau();
		VoirArticle();
		totaleHTTTC();
		totaleGeneral();
	}
	// Event Listener on Button[#btnSupprimer].onMouseClicked
	@FXML
	public void SupprimerArticle(MouseEvent event) {
		if(event.getSource()==btnSupprimer) 
		{
			Alert alert = new Alert (AlertType.CONFIRMATION) ;
			alert.setHeaderText("Êtes-vous sûr de vouloir supprimer cet article");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.isPresent()&&result.get()==ButtonType.OK)
			{
				deleteArticle();	
				 clear();
			}
		}
	}
	// Event Listener on Button[#btnModifier].onMouseClicked
	@FXML
	public void modifierArticle(MouseEvent event) {
		if(event.getSource()==btnModifier)
		{
			Alert alert = new Alert (AlertType.CONFIRMATION) ;
			alert.setHeaderText("Êtes-vous sûr de vouloir modifier cet article");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.isPresent()&&result.get()==ButtonType.OK)
			{
				modifierArticle();	
				clear();
			}
		}
	}
	// Event Listener on Button[#btnvalider].onMouseClicked
	@FXML
	public void validerBL(MouseEvent event) {
		if(event.getSource() == btnvalider)
		{	
		 Alert alert = new Alert (AlertType.CONFIRMATION) ;
			alert.setHeaderText("Êtes-vous sûr de vouloir valider ce bon de reception");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.isPresent()&&result.get()==ButtonType.OK)
			{
				AjouterBonDeLivraison();
				condition();
		 (((Node) event.getSource())).getScene().getWindow().hide();
			}
		}
		
	}
	/************************************ INITIALIZE ************************/
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		viderTable();
		remplirComboBox();	
		setNumero();
		setDateCreation();
		
	}
	
	
	/************************************ CONNECTION ********************************************************/
	public Connection getConnection()
	{
		Connection conn ;
		try {
			conn =DriverManager.getConnection("jdbc:mysql://localhost:3306/atec","root","");
		return conn ;
		} catch (SQLException e) {
			System.out.println("Error" + e.getMessage());
			return null ;
		}
	}
	/************************************ EXECUTE QUERY ********************************************************/
	private void executeQuery(String query) {
		
		Connection conn = getConnection();	
		Statement st ;
		
		try {
			st = conn.createStatement();
			st.executeUpdate(query);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	/*********************************************** REMPLIR COMBO BOX *******************************************************/	
	public void remplirComboBox()
	{
		Connection conn = getConnection();
		String query = "SELECT nom_societe FROM fournisseur" ; 
		Statement st ;
		ResultSet rs ;
		
		try {
			st = conn.createStatement();
			rs = st.executeQuery(query);
			
			while(rs.next())
			{
				String nom = rs.getString("nom_societe");
				tfFournisseur.getItems().add(nom); 	
			}
			}catch(Exception e) {
				 e.printStackTrace();
			}
	}
	/************************************ SET NUMERO BON *********************************************************/
	public void setNumero()
	{
		Connection conn = getConnection();
		String query = "SELECT numeroBon FROM bonreception" ; 
		Statement st ;
		ResultSet rs ;
		
		try {
			st = conn.createStatement();
			rs = st.executeQuery(query);
			
			while(rs.next())
			{
				tfnum.setText(""+rs.getInt("numeroBon"));
			}
			 
			}catch(Exception e) {
				 e.printStackTrace();
			}
		
	}
	/*************************************** DATE CREATION ******************************************************************/
	public void setDateCreation()
	{
		tfdateCrea.setValue(LocalDate.now());
	}
	

	/******************************************************* AJOUTER UN ARTICE DANS LE TABLEAU ********************************************************/
	public void InsererArticleTableau()
	{
		int x = 1 ;
		int y = 1 ;
		String numero = tfnum.getText();
		String query="INSERT INTO articlebr(code, designation, qte, prixUHT, tva, 	PoidsUni, totaleHT,totaleTTC,numeroBon ) VALUES ('"+tfcode.getText()+"','"+tfdesi.getText()+"','"+tfqte.getText()+"','"+tfprixUHT.getText()+"','"+tfTva.getText()+"','"+tfpoidsU.getText()+"',"+x+","+y+",'"+numero+"')" ;
		executeQuery(query);
		String query2="INSERT INTO articlebrtemp(code, designation, qte, prixUHT, tva, 	PoidsUni, totaleHT,totaleTTC,numeroBon ) VALUES ('"+tfcode.getText()+"','"+tfdesi.getText()+"','"+tfqte.getText()+"','"+tfprixUHT.getText()+"','"+tfTva.getText()+"','"+tfpoidsU.getText()+"',"+x+","+y+",'"+numero+"')" ;
		executeQuery(query2);
	}
	/*************************************************** VALIDER LE BON DE LIVRAISON************************************************************************/
	public void AjouterBonDeLivraison()
	{	
		String query="INSERT INTO bonreception( fournisseur, reference, dateCreation,TotaleHTGen,TotaleTTCGen) VALUES ('"+tfFournisseur.getValue()+"','"+tfref.getText()+"','"+tfdateCrea.getValue()+"','"+tfTotaleHTGen.getText()+"','"+tfTotaleTTCGen.getText()+"')" ;
		executeQuery(query);		
	}
/***************************************** AFFICHAGE DANS LE TABLEAU ********************************************************/
	
	public ObservableList<ArticleBR> getArticleListe()
	{
	
	ObservableList<ArticleBR> ArticleListe = FXCollections.observableArrayList();
	Connection conn = getConnection();
	String query = "SELECT * from articlebrtemp";
	Statement st ;
	ResultSet rs ;
	
	try {
		st = conn.createStatement();
		rs = st.executeQuery(query);
		ArticleBR bdl ;
		while(rs.next())
		{
			bdl = new ArticleBR(rs.getInt("id"),rs.getInt("code"),rs.getString("designation"),rs.getString("prixUHT"),rs.getString("poidsUni"),rs.getString("numeroBon"),rs.getString("qte"),rs.getString("tva"),rs.getInt("totaleHT"),rs.getInt("totaleTTC"));
			ArticleListe.add(bdl);
		}
		 
		}catch(Exception e) {
			 e.printStackTrace();
		}
	
	return ArticleListe ;
	
	}
	
	public void VoirArticle()
	{
		ObservableList<ArticleBR> list = getArticleListe();
		tvcode.setCellValueFactory(new PropertyValueFactory("code"));
		tvdesi.setCellValueFactory(new PropertyValueFactory("designation"));
		tvprixu.setCellValueFactory(new PropertyValueFactory("prixUHT"));
		tvqte.setCellValueFactory(new PropertyValueFactory("qte"));
		tvpoidsu.setCellValueFactory(new PropertyValueFactory("poidsUni"));
		tvtva.setCellValueFactory(new PropertyValueFactory("tva"));
		tvtotaleHT.setCellValueFactory(new PropertyValueFactory("totaleHT"));
		tvtotaleTTC.setCellValueFactory(new PropertyValueFactory("totaleTTC"));
		tvID.setCellValueFactory(new PropertyValueFactory("id"));
		tvnumero.setCellValueFactory(new PropertyValueFactory("numeroBon"));

		tvArticle.getItems().clear();

		tvArticle.setItems(list);
	
	}
	/************************************* RECUPERER LE CODE DE L'ARTICLE **********************************/
	public ObservableList<Article> getArticleCode()
	{
	
	ObservableList<Article> ArticleCode = FXCollections.observableArrayList();
	Connection conn = getConnection();
	String query = "SELECT code from article";
	Statement st ;
	ResultSet rs ;
	
	try {
		st = conn.createStatement();
		rs = st.executeQuery(query);
		Article art ;
		while(rs.next())
		{
			art = new Article (rs.getInt("code"));
			ArticleCode.add(art);
		}
		 
		}catch(Exception e) {
			 e.printStackTrace();
		}
	
	return ArticleCode ;
	
	}
	/************************************************* CONDITION SUR LE CODE DE L'ARTICLE *******************************************/
	public void condition()
	{
		ObservableList<Article> liste = getArticleCode();
		String x ;
		int code = 0 ;
		try {
			 x = tfcode.getText();
			 code = Integer.parseInt(x);
		}catch(NumberFormatException e){
		       System.out.println("not a number");
		}
		for(Article tab : liste) {
			if(code==tab.getCode()) {
				plusStock() ;
			}else{
				ajoutArticle();	
			}
		}		
	}
	/********************************************** PLUS STOCK **************************************************/
	public void plusStock()
	{
		String code = null ;
		String qte = null ;
		Connection conn = getConnection();
		String query = "SELECT code,qte from articlebr";
		Statement st ;
		ResultSet rs ;
		try {
			st = conn.createStatement();
			rs = st.executeQuery(query);
		while(rs.next())
		{
			  code = rs.getString("code");
			  qte = rs.getString("qte");
		}
		}catch(Exception e) {
			 e.printStackTrace();
		}
		String query2="UPDATE article SET stock=stock+'"+qte+"' WHERE code='"+code+"'";
		executeQuery(query2);
	}
	/**************************************** AJOUT D'UN NOUVEAU ARTICLE *********************************************/
	public void ajoutArticle()
	{
		
        String query = "INSERT INTO article( code, designation, prix_achat,stock) VALUES ('" + tfcode.getText() + "','" + tfdesi.getText() + "','" + tfprixUHT.getText() +"','"+tfqte.getText()+"')";
		executeQuery(query);
	
	}
	/*************************** EFFACER ARTICLE DE LA TABLE ARTICLE *******************************************************************************/
	public void deleteArticle()
	{
		  String query="DELETE  FROM articlebr where id ="+tfID.getText()+"";
		  executeQuery(query);
		  String query2="DELETE  FROM articlebrtemp where id ="+tfID.getText()+"";
		  executeQuery(query2);
		  VoirArticle();
	}
	/**************************** MODIFIER ARTICLE DE LA TABLE ARTICLE**********************************************************************************************/
	public void modifierArticle()
	{
		String query = "UPDATE articlebr SET code  = '" +tfcode.getText() + "', designation = '" + tfdesi.getText() + "', qte = '" +tfqte.getText() + "', prixUHT = '" +tfprixUHT.getText() + "', tva = '" +tfTva.getText() +"', PoidsUni = '" +tfpoidsU.getText() +"' WHERE  id = " +tfID.getText() + "";
		  executeQuery(query);
		  String query2 = "UPDATE articlebrtemp SET code  = '" +tfcode.getText() + "', designation = '" + tfdesi.getText() + "', qte = '" +tfqte.getText() + "', prixUHT = '" +tfprixUHT.getText() + "', tva = '" +tfTva.getText() +"', PoidsUni = '" +tfpoidsU.getText() +"' WHERE  id = " +tfID.getText() + "";
		  executeQuery(query2);
		  VoirArticle();
	}
	/***************************************** CLEAR FUNCTION *********************************************************/
	public void clear()
	{
		tfcode.clear();
		tfdesi.clear();
		tfID.clear();
		tfprixUHT.clear();
		tfqte.clear();
		tfpoidsU.clear();
		tfTva.clear();	
	}
	/***************************************** VIDER LA TABLE ***********************************/
	public void viderTable()
	{
		String query="TRUNCATE TABLE articlebrtemp";
		executeQuery(query);
	}
	/************************************* CALCUL TOTAL HT,TTC************************************************************************/
	public void totaleHTTTC()
	{
		int prixuht = 0;
		int qte = 0 ; 
		int tva = 0;
		String x = null ; 
		try {
			 x = tfprixUHT.getText();
		 prixuht = Integer.parseInt(x);
		}catch(NumberFormatException e){
		       System.out.println("not a number");
		}
		try {
			String y = tfqte.getText();
		 qte = Integer.parseInt(y);
		}catch(NumberFormatException e){
		       System.out.println("not a number");
		}
		
		try {
			String z = tfTva.getText();
		 tva = Integer.parseInt(z);
		}catch(NumberFormatException e){
		       System.out.println("not a number");
		}

		int res = (prixuht*qte) ;
		tva=(res*tva)/100;
		int r = 0 ; 
		r=res+tva ;
		int id = getID();

		  String query = "UPDATE articlebr SET totaleHT  = '" +res + "', totaleTTC = '" + r + "'  WHERE  id = " +id + "";
		  executeQuery(query);
		  String query2 = "UPDATE articlebrtemp SET totaleHT  = '" +res + "', totaleTTC = '" + r + "'  WHERE  id = " +id + "";
		  executeQuery(query2);
		  VoirArticle();
		
	}
	/************************************** GET ID **********************************************************************/
	public int  getID()
	{
		int res = 0 ;
		Connection conn = getConnection();
		String query = "SELECT id FROM articlebrtemp ORDER BY ID DESC LIMIT 1";
		Statement st ;
		ResultSet rs ;
		try {
			st = conn.createStatement();
			rs = st.executeQuery(query);
		while(rs.next())
		{
			   res = rs.getInt("id");
		}
		}catch(Exception e) {
			 e.printStackTrace();
		}
		return res ;
	}
	/***************************** TOTALE GENERAL ************************************************/
	public  void totaleGeneral()
	{
		int resht = 0 ;
		int resttc = 0 ;
		Connection conn = getConnection();
		String query = "SELECT SUM(totaleHT),SUM(totaleTTC) FROM articlebrtemp INNER JOIN bonreception ON articlebrtemp.numeroBon=bonreception.numeroBon WHERE articlebrtemp.numeroBon=(SELECT MAX(articlebrtemp.numeroBon)FROM bonreception)";
		Statement st ;
		ResultSet rs ;
		try {
			st = conn.createStatement();
			rs = st.executeQuery(query);
		while(rs.next())
		{
			   resht = rs.getInt("SUM(totaleHT)");
			   resttc = rs.getInt("SUM(totaleTTC)");
		}
		}catch(Exception e) {
			 e.printStackTrace();
		}	
		tfTotaleHTGen.setText(""+resht);
		tfTotaleTTCGen.setText(""+resttc);
	}
	
	
}

